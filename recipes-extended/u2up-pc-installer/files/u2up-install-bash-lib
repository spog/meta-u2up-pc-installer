#!/bin/bash
#
# A dialog menu based u2up-pc-installer program
#
#set -xe

U2UP_CONF_DIR="/etc/u2up-conf.d"
if [ ! -d "${U2UP_CONF_DIR}" ]; then
	rm -rf $U2UP_CONF_DIR
	mkdir -p $U2UP_CONF_DIR
fi
U2UP_KEYMAP_CONF_FILE=${U2UP_CONF_DIR}/10-keymap-conf
U2UP_TARGET_DISK_CONF_FILE=${U2UP_CONF_DIR}/20-target_disk-conf
U2UP_TARGET_HOSTNAME_CONF_FILE=${U2UP_CONF_DIR}/30-hostname-conf
U2UP_TARGET_ADMIN_CONF_FILE=${U2UP_CONF_DIR}/40-admin-conf
U2UP_NETWORK_CONF_FILE=${U2UP_CONF_DIR}/50-network-conf
U2UP_INSTALL_REPO_CONF_FILE=${U2UP_CONF_DIR}/60-install_repo-conf

U2UP_TEMP_DIR="/tmp/u2up-temp"
if [ ! -d "${U2UP_TEMP_DIR}" ]; then
	rm -rf $U2UP_TEMP_DIR
	mkdir -p $U2UP_TEMP_DIR
fi
U2UP_TARGET_DISK_SFDISK_BASH=${U2UP_TEMP_DIR}/u2up_target_disk-sfdisk_bash
U2UP_TARGET_DISK_SFDISK_DUMP=${U2UP_TEMP_DIR}/u2up_target_disk-sfdisk_dump

PART_TYPE_EFI="C12A7328-F81F-11D2-BA4B-00A0C93EC93B"
PART_TYPE_LINUX="0FC63DAF-8483-4772-8E79-3D69D8477DE4"

set_target_done_for() {
	local file=${1}
	local new_target_done=${2:-0}
	local rv=1
	if [ -z "$file" ] || [ ! -e "$file" ]; then
		return $rv
	fi
	cat ${file} | grep -v "TARGET_DONE=" > ${file}_tmp
	rv=$?
	echo "TARGET_DONE=${new_target_done}" >> ${file}_tmp
	(( rv+=$? ))
	mv ${file}_tmp ${file}
	(( rv+=$? ))
	return $rv
}

store_keymap_selection() {
	local rv=1
	local keymap=$1
	if [ -n "$keymap" ]; then
		loadkeys -p $keymap 2> /dev/null
		rv=$?
		if [ $rv -eq 0 ]; then
			echo "KEYMAP_SET=$keymap" > ${U2UP_KEYMAP_CONF_FILE}
			echo "TARGET_DONE=0" >> ${U2UP_KEYMAP_CONF_FILE}
		fi
	fi
	return $rv
}

enable_keymap_selection() {
	local rv=1
	local KEYMAP_SET=""
	local TARGET_DONE=0
	local root_path_prefix=${1:-"/"}
	local new_target_done=${2:-0}

	if [ ! -f "${U2UP_KEYMAP_CONF_FILE}" ]; then
		return 1
	fi
	source ${root_path_prefix}${U2UP_KEYMAP_CONF_FILE}
	if [ -n "$KEYMAP_SET" ] && [ $TARGET_DONE -eq 0 ]; then
		loadkeys $KEYMAP_SET
		rv=$?
		if [ $rv -eq 0 ]; then
			echo "KEYMAP=$KEYMAP_SET" > ${root_path_prefix}/etc/vconsole.conf
			set_target_done_for ${root_path_prefix}${U2UP_KEYMAP_CONF_FILE} ${new_target_done}
			rv=$?
		fi
	fi
	return $rv
}

store_target_disk_selection() {
	disk=$1

	cat ${U2UP_TARGET_DISK_CONF_FILE} | grep -v "TARGET_DISK_SET=" > ${U2UP_TARGET_DISK_CONF_FILE}_tmp
	if [ -n "$disk" ]; then
		echo "TARGET_DISK_SET=$disk" >> ${U2UP_TARGET_DISK_CONF_FILE}_tmp
	fi
	mv ${U2UP_TARGET_DISK_CONF_FILE}_tmp ${U2UP_TARGET_DISK_CONF_FILE}
}

store_target_part_selection() {
	part=$1

	cat ${U2UP_TARGET_DISK_CONF_FILE} | grep -v "TARGET_PART_SET=" > ${U2UP_TARGET_DISK_CONF_FILE}_tmp
	if [ -n "$part" ]; then
		echo "TARGET_PART_SET=$part" >> ${U2UP_TARGET_DISK_CONF_FILE}_tmp
	fi
	mv ${U2UP_TARGET_DISK_CONF_FILE}_tmp ${U2UP_TARGET_DISK_CONF_FILE}
}

store_target_partsize_selection() {
	local var_target_partsz_set=""
	local var_target_partsz_current=""
	local part=$(echo $@ | sed 's/RENAMED //' | sed 's/ .*//')
	declare -i part_size=$(echo $@ | sed 's/.*://')

	if [ $part_size -le 0 ]; then
		return
	fi
	case $part in
	boot)
		var_target_partsz_set=TARGET_BOOT_PARTSZ_SET
		var_target_partsz_current=target_boot_partsz_current
		;;
	log)
		var_target_partsz_set=TARGET_LOG_PARTSZ_SET
		var_target_partsz_current=target_log_partsz_current
		;;
	rootA)
		var_target_partsz_set=TARGET_ROOTA_PARTSZ_SET
		var_target_partsz_current=target_rootA_partsz_current
		;;
	rootB)
		var_target_partsz_set=TARGET_ROOTB_PARTSZ_SET
		var_target_partsz_current=target_rootB_partsz_current
		;;
	*)
		exit;
	esac

	cat ${U2UP_TARGET_DISK_CONF_FILE} | grep -v "${var_target_partsz_set}=" > ${U2UP_TARGET_DISK_CONF_FILE}_tmp
	echo "${var_target_partsz_set}=$part_size" >> ${U2UP_TARGET_DISK_CONF_FILE}_tmp
	mv ${U2UP_TARGET_DISK_CONF_FILE}_tmp ${U2UP_TARGET_DISK_CONF_FILE}
	echo "${var_target_partsz_current}=${part_size}"
}

store_net_internal_iface_selection() {
	ifname=$1

	cat ${U2UP_NETWORK_CONF_FILE} | grep -v "NET_INTERNAL_IFNAME_SET=" > ${U2UP_NETWORK_CONF_FILE}_tmp
	if [ -n "$ifname" ]; then
		echo "NET_INTERNAL_IFNAME_SET=$ifname" >> ${U2UP_NETWORK_CONF_FILE}_tmp
	fi
	mv ${U2UP_NETWORK_CONF_FILE}_tmp ${U2UP_NETWORK_CONF_FILE}
}

store_target_hostname_selection() {
	local var_target_hostname_set=""
	local var_target_hostname_current=""
	local value="$(echo $@ | sed 's/[^:]*://' | sed 's/ *//')"
	local name="$(echo $@ | sed 's/RENAMED //' | sed 's/:.*//')"

	if [ -z "${value}" ] || [ "x${name}" = "x${value}" ]; then
		return 0
	fi
	case $name in
	"Hostname")
		var_target_hostname_set=TARGET_HOSTNAME_SET
		var_target_hostname_current=target_hostname_current
		;;
	*)
		return 1;
	esac

	cat ${U2UP_TARGET_HOSTNAME_CONF_FILE} | grep -v "${var_target_hostname_set}=" > ${U2UP_TARGET_HOSTNAME_CONF_FILE}_tmp
	echo "${var_target_hostname_set}=$value" >> ${U2UP_TARGET_HOSTNAME_CONF_FILE}_tmp
	mv ${U2UP_TARGET_HOSTNAME_CONF_FILE}_tmp ${U2UP_TARGET_HOSTNAME_CONF_FILE}
	echo "${var_target_hostname_current}=${value}"
}

enable_target_hostname_selection() {
	local rv=1
	local TARGET_HOSTNAME_SET=""
	local TARGET_DONE=0
	local root_path_prefix=${1:-"/"}
	local new_target_done=${2:-0}

	if [ ! -f "${U2UP_TARGET_HOSTNAME_CONF_FILE}" ]; then
		return 1
	fi
	source ${root_path_prefix}${U2UP_TARGET_HOSTNAME_CONF_FILE}
	if [ -n "$TARGET_HOSTNAME_SET" ] && [ $TARGET_DONE -eq 0 ]; then
		hostnamectl set-hostname $TARGET_HOSTNAME_SET
		rv=$?
		if [ $rv -eq 0 ]; then
			set_target_done_for ${root_path_prefix}${U2UP_TARGET_HOSTNAME_CONF_FILE} ${new_target_done}
			rv=$?
		fi
	fi
	return $rv
}

store_target_admin_selection() {
	local var_target_admin_name_set=""
	local var_target_admin_name_current=""
	local value="$(echo $@ | sed 's/[^:]*://' | sed 's/ *//')"
	local name="$(echo $@ | sed 's/RENAMED //' | sed 's/:.*//')"

	if [ -z "${value}" ] || [ "x${name}" = "x${value}" ]; then
		return 0
	fi
	case $name in
	"Admin name")
		var_target_admin_name_set=TARGET_ADMIN_NAME_SET
		var_target_admin_name_current=target_admin_name_current
		;;
	*)
		return 1;
	esac

	cat ${U2UP_TARGET_ADMIN_CONF_FILE} | grep -v "${var_target_admin_name_set}=" > ${U2UP_TARGET_ADMIN_CONF_FILE}_tmp
	echo "${var_target_admin_name_set}=$value" >> ${U2UP_TARGET_ADMIN_CONF_FILE}_tmp
	mv ${U2UP_TARGET_ADMIN_CONF_FILE}_tmp ${U2UP_TARGET_ADMIN_CONF_FILE}
	echo "${var_target_admin_name_current}=${value}"
}

enable_target_admin_selection() {
	local rv=1
	local TARGET_ADMIN_NAME_SET=""
	local TARGET_DONE=0
	local root_path_prefix=${1:-"/"}
	local new_target_done=${2:-0}

	if [ ! -f "${U2UP_TARGET_ADMIN_CONF_FILE}" ]; then
		return 1
	fi
	source ${root_path_prefix}${U2UP_TARGET_ADMIN_CONF_FILE}
	if [ -n "$TARGET_ADMIN_NAME_SET" ] && [ $TARGET_DONE -eq 0 ]; then
		useradd -m -c "Admin User" $TARGET_ADMIN_NAME_SET
		rv=$?
		if [ $rv -ne 0 ] && [ $rv -ne 9 ]; then
			return 1
		fi
		passwd -de $TARGET_ADMIN_NAME_SET
		rv=$?
		if [ $rv -ne 0 ]; then
			return 1
		fi
		usermod -aG wheel $TARGET_ADMIN_NAME_SET
		rv=$?
		if [ $rv -ne 0 ]; then
			return 1
		fi
		# Locking the root account and scrambling its password!
		passwd -l root
		rv=$?
		if [ $rv -ne 0 ]; then
			return 1
		fi
		usermod -p '!' root
		rv=$?
		if [ $rv -eq 0 ]; then
			set_target_done_for ${root_path_prefix}${U2UP_TARGET_ADMIN_CONF_FILE} ${new_target_done}
			rv=$?
		fi
	fi
	return $rv
}

store_net_config_selection() {
	local var_net_config_set=""
	local var_net_config_current=""
	local value="$(echo $@ | sed 's/[^:]*://' | sed 's/ *//')"
	local name="$(echo $@ | sed 's/RENAMED //' | sed 's/:.*//')"

	if [ -z "${value}" ] || [ "x${name}" = "x${value}" ]; then
		return 0
	fi
	case $name in
	"IP address/mask")
		var_net_config_set=NET_INTERNAL_ADDR_MASK_SET
		var_net_config_current=net_internal_addr_mask_current
		;;
	"IP gateway")
		var_net_config_set=NET_INTERNAL_GW_SET
		var_net_config_current=net_internal_gw_current
		;;
	"DNS")
		var_net_config_set=NET_DNS_SET
		var_net_config_current=net_dns_current
		;;
	"Domains")
		var_net_config_set=NET_DOMAINS_SET
		var_net_config_current=net_domains_current
		;;
	*)
		return 1;
	esac

	cat ${U2UP_NETWORK_CONF_FILE} | grep -v "${var_net_config_set}=" > ${U2UP_NETWORK_CONF_FILE}_tmp
	echo "${var_net_config_set}=$value" >> ${U2UP_NETWORK_CONF_FILE}_tmp
	mv ${U2UP_NETWORK_CONF_FILE}_tmp ${U2UP_NETWORK_CONF_FILE}
	echo "${var_net_config_current}=${value}"
}

enable_net_config_selection() {
	local rv=0
	local NET_INTERNAL_IFNAME_SET=""
	local NET_INTERNAL_ADDR_MASK_SET=""
	local NET_INTERNAL_GW_SET=""
	local NET_DNS_SET=""
	local NET_DOMAINS_SET=""
	local TARGET_DONE=0
	local root_path_prefix=${1:-"/"}
	local new_target_done=${2:-0}

	if [ ! -f "${U2UP_NETWORK_CONF_FILE}" ]; then
		return 1
	fi
	source ${root_path_prefix}${U2UP_NETWORK_CONF_FILE}
	if [ $TARGET_DONE -eq 0 ]; then
		if [ -n "${NET_INTERNAL_IFNAME_SET}" ] && [ -n "${NET_INTERNAL_ADDR_MASK_SET}" ] && [ -n "${NET_INTERNAL_GW_SET}" ]; then
			nmcli con add type ethernet con-name internal ifname ${NET_INTERNAL_IFNAME_SET} ip4 ${NET_INTERNAL_ADDR_MASK_SET} gw4 ${NET_INTERNAL_GW_SET}
			rv=$?
			if [ $rv -eq 0 ]; then
				nmcli con mod internal connection.zone trusted
				rv=$?
			fi
		fi
		if [ $rv -eq 0 ] && [ -n "${NET_DNS_SET}" ]; then
			nmcli con mod internal ipv4.dns "${NET_DNS_SET}"
			rv=$?
		fi
		if [ $rv -eq 0 ]; then
			set_target_done_for ${root_path_prefix}${U2UP_NETWORK_CONF_FILE} ${new_target_done}
			rv=$?
		fi
	fi
	return $rv
}

store_install_repo_selection() {
	local var_install_repo_set=""
	local var_install_repo_current=""
	local value="$(echo $@ | sed 's/[^:]*://' | sed 's/ *//')"
	local name="$(echo $@ | sed 's/RENAMED //' | sed 's/:.*//')"

	if [ -z "${value}" ] || [ "x${name}" = "x${value}" ]; then
		return 0
	fi
	case $name in
	"Base URL")
		var_install_repo_set=INSTALL_REPO_BASE_URL_SET
		var_install_repo_current=install_repo_base_url_current
		;;
	*)
		return 1;
	esac

	cat ${U2UP_INSTALL_REPO_CONF_FILE} | grep -v "${var_install_repo_set}=" > ${U2UP_INSTALL_REPO_CONF_FILE}_tmp
	echo "${var_install_repo_set}=$value" >> ${U2UP_INSTALL_REPO_CONF_FILE}_tmp
	mv ${U2UP_INSTALL_REPO_CONF_FILE}_tmp ${U2UP_INSTALL_REPO_CONF_FILE}
	echo "${var_install_repo_current}=${value}"
}

enable_install_repo_selection() {
	local rv=0
	local INSTALL_REPO_BASE_URL_SET=""
	local TARGET_DONE=0
	local root_path_prefix=${1:-"/"}
	local new_target_done=${2:-0}

	if [ ! -f "${U2UP_INSTALL_REPO_CONF_FILE}" ]; then
		return 1
	fi
	source ${root_path_prefix}${U2UP_INSTALL_REPO_CONF_FILE}
	if [ $TARGET_DONE -eq 0 ]; then
		if [ -n "${INSTALL_REPO_BASE_URL_SET}" ]; then
			mkdir -p ${root_path_prefix}/etc/yum.repos.d
			echo "[base-repo]" > ${root_path_prefix}/etc/yum.repos.d/base.repo
			echo "name=Base installation repository" >> ${root_path_prefix}/etc/yum.repos.d/base.repo
			echo "baseurl=${INSTALL_REPO_BASE_URL_SET}" >> ${root_path_prefix}/etc/yum.repos.d/base.repo
			echo "enabled=1" >> ${root_path_prefix}/etc/yum.repos.d/base.repo
			echo "metadata_expire=0" >> ${root_path_prefix}/etc/yum.repos.d/base.repo
			echo "gpgcheck=0" >> ${root_path_prefix}/etc/yum.repos.d/base.repo
			set_target_done_for ${root_path_prefix}${U2UP_INSTALL_REPO_CONF_FILE} ${new_target_done}
			rv=$?
		else
			rm -rf /etc/yum.repos.d
			rv=$?
		fi
	fi
	return $rv
}

populate_u2up_configurations() {
	local root_path_prefix=$1
	local file=""
	local rv=1
	if [ -z "$root_path_prefix" ]; then
		return $rv
	fi
	if [ ! -d "${root_path_prefix}${U2UP_CONF_DIR}" ]; then
		rm -rf ${root_path_prefix}${U2UP_CONF_DIR}
		rv=$?
	fi
	rm -rf ${root_path_prefix}${U2UP_CONF_DIR}
	cp -a ${U2UP_CONF_DIR} ${root_path_prefix}${U2UP_CONF_DIR}
	rv=$?
	if [ $rv -eq 0 ]; then
		for file in $(ls ${root_path_prefix}${U2UP_CONF_DIR}); do
			set_target_done_for ${root_path_prefix}${U2UP_CONF_DIR}/${file} 0
			rv=$?
		done
	fi
	return $rv
}

evaluate_u2up_configurations() {
#set -x
	local root_path_prefix=${1:-"/"}
	local file=""
	local rv=1
	if [ ! -d "${root_path_prefix}${U2UP_CONF_DIR}" ]; then
		return $rv
	fi
	rv=0
	for file in $(ls ${root_path_prefix}${U2UP_CONF_DIR}); do
		case $file in
		$(basename ${root_path_prefix}${U2UP_KEYMAP_CONF_FILE}))
			enable_keymap_selection ${root_path_prefix} 1
			rv=$?
			;;
		$(basename ${root_path_prefix}${U2UP_TARGET_DISK_CONF_FILE}))
			;;
		$(basename ${root_path_prefix}${U2UP_TARGET_HOSTNAME_CONF_FILE}))
			enable_target_hostname_selection ${root_path_prefix} 1
			rv=$?
			;;
		$(basename ${root_path_prefix}${U2UP_TARGET_ADMIN_CONF_FILE}))
			enable_target_admin_selection ${root_path_prefix} 1
			rv=$?
			;;
		$(basename ${root_path_prefix}${U2UP_NETWORK_CONF_FILE}))
			enable_net_config_selection ${root_path_prefix} 1
			rv=$?
			;;
		$(basename ${root_path_prefix}${U2UP_INSTALL_REPO_CONF_FILE}))
			enable_install_repo_selection ${root_path_prefix} 1
			rv=$?
			;;
		esac
	done
	return $rv
}

